#!/usr/bin/env tsx

import { writeFile } from "node:fs/promises"
import { join } from "node:path"
import * as ical from "node-ical"

interface VacationEvent {
  summary: string
  start: string
  end: string
  location?: string
}

interface ICalEvent {
  type?: string
  uid?: string
  summary?: string
  description?: string
  start?: Date
  end?: Date
  location?: string
  categories?: string[]
}

interface ICalData {
  [key: string]: ICalEvent
}

/**
 * T√©l√©charge et parse un fichier iCal depuis une URL
 */
async function fetchIcalData(url: string): Promise<ICalData> {
  console.log(`üì• T√©l√©chargement du calendrier depuis: ${url}`)

  try {
    const data = await ical.fromURL(url)
    console.log(`‚úÖ Calendrier t√©l√©charg√© avec succ√®s`)
    return data as ICalData
  } catch (error) {
    console.error(`‚ùå Erreur lors du t√©l√©chargement:`, error)
    throw error
  }
}

/**
 * Convertit les donn√©es iCal en format JSON structur√©
 */
function convertIcalToJson(icalData: ICalData): VacationEvent[] {
  const events: VacationEvent[] = []

  console.log(`üîÑ Conversion des √©v√©nements...`)

  for (const key in icalData) {
    const event = icalData[key]

    // Ne traiter que les √©v√©nements (pas les m√©tadonn√©es du calendrier)
    if (event.type === "VEVENT") {
      const vacationEvent: VacationEvent = {
        summary: event.summary || "√âv√©nement sans titre",
        start: event.start?.toISOString() || "",
        end: event.end?.toISOString() || "",
      }

      // Ajouter le champ location s'il existe
      if (event.location) {
        vacationEvent.location = event.location
      }

      events.push(vacationEvent)
    }
  }

  // Trier les √©v√©nements par date de d√©but
  events.sort(
    (a, b) => new Date(a.start).getTime() - new Date(b.start).getTime()
  )

  console.log(`‚úÖ ${events.length} √©v√©nements convertis`)

  return events
}

/**
 * Sauvegarde les donn√©es JSON dans un fichier
 */
async function saveJsonFile(
  events: VacationEvent[],
  outputPath: string
): Promise<void> {
  try {
    const jsonContent = JSON.stringify(events, null, 2)
    await writeFile(outputPath, jsonContent, "utf-8")
    console.log(`üíæ Fichier JSON sauvegard√©: ${outputPath}`)
  } catch (error) {
    console.error(`‚ùå Erreur lors de la sauvegarde:`, error)
    throw error
  }
}

/**
 * Fonction principale
 */
async function main() {
  const ICAL_URL =
    "https://fr.ftp.opendatasoft.com/openscol/fr-en-calendrier-scolaire/Zone-B.ics"
  const OUTPUT_FILE = join(process.cwd(), "public", "vacation-calendar.json")

  console.log("üöÄ G√©n√©rateur de calendrier de vacances scolaires")
  console.log("=".repeat(50))

  try {
    // 1. T√©l√©charger et parser le fichier iCal
    const icalData = await fetchIcalData(ICAL_URL)

    // 2. Convertir en JSON
    const events = convertIcalToJson(icalData)

    // 3. Sauvegarder le fichier JSON
    await saveJsonFile(events, OUTPUT_FILE)

    console.log("=".repeat(50))
    console.log("üéâ Conversion termin√©e avec succ√®s !")
    console.log(`üìä Statistiques:`)
    console.log(`   - √âv√©nements trait√©s: ${events.length}`)
    console.log(`   - Fichier de sortie: ${OUTPUT_FILE}`)

    // Afficher un aper√ßu des prochains √©v√©nements
    const now = new Date()
    const upcomingEvents = events
      .filter((event: VacationEvent) => new Date(event.start) > now)
      .slice(0, 3)

    if (upcomingEvents.length > 0) {
      console.log(`\nüìÖ Prochains √©v√©nements:`)
      upcomingEvents.forEach((event: VacationEvent, index: number) => {
        const startDate = new Date(event.start).toLocaleDateString("fr-FR")
        console.log(`   ${index + 1}. ${event.summary} - ${startDate}`)
      })
    }
  } catch (error) {
    console.error("üí• Erreur fatale:", error)
    process.exit(1)
  }
}

// Ex√©cuter le script si appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  main()
}

export { main, fetchIcalData, convertIcalToJson, saveJsonFile }
